# Generated by Selenium IDE
import pytest
import time
import json
from time import sleep
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from webdriver_manager.chrome import ChromeDriverManager
from constants import globalConstants as globCon

class TestDefaultSuite():
  def setup_method(self, method):
    self.driver = webdriver.Chrome(ChromeDriverManager().install())
    self.driver.get(globCon.URL)
    self.driver.maximize_window()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def wait_for_window(self, timeout = 2):
    time.sleep(round(timeout / 1000))
    wh_now = self.driver.window_handles
    wh_then = self.vars["window_handles"]
    if len(wh_now) > len(wh_then):
      return set(wh_now).difference(set(wh_then)).pop()
  
  def test_succesfulPurchase(self):
    
    WebDriverWait(self.driver, 1).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "*[data-test=\"username\"]")))
    WebDriverWait(self.driver, 1).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "*[data-test=\"password\"]")))
    userName = self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"username\"]")
    userName.send_keys(globCon.standardUsername)
    password = self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"password\"]")
    password.send_keys(globCon.validPassword)
    WebDriverWait(self.driver, 1).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "*[data-test=\"login-button\"]")))
    loginBtn = self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"login-button\"]")   
    loginBtn.click()
    WebDriverWait(self.driver, 1).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "*[data-test=\"add-to-cart-sauce-labs-backpack\"]")))
    addToCart = self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"add-to-cart-sauce-labs-backpack\"]")
    addToCart.click()
    WebDriverWait(self.driver, 1).until(expected_conditions.visibility_of_element_located((By.LINK_TEXT, "1")))
    self.driver.find_element(By.LINK_TEXT, "1").click()
    WebDriverWait(self.driver, 1).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "*[data-test=\"checkout\"]")))
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"checkout\"]").click()
    WebDriverWait(self.driver, 1).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "*[data-test=\"firstName\"]")))
    WebDriverWait(self.driver, 1).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "*[data-test=\"lastName\"]")))
    WebDriverWait(self.driver, 1).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "*[data-test=\"postalCode\"]")))
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"firstName\"]").send_keys("Ä°sim")
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"lastName\"]").send_keys("Soyisim")
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"postalCode\"]").send_keys("99999")
    WebDriverWait(self.driver, 1).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "*[data-test=\"continue\"]")))
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"continue\"]").click()
    WebDriverWait(self.driver, 1).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "*[data-test=\"finish\"]")))
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"finish\"]").click()
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".pony_express")
    assert len(elements) > 0
  
  def test_lowToHigh(self):
    
    WebDriverWait(self.driver, 4).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "*[data-test=\"username\"]")))
    WebDriverWait(self.driver, 4).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "*[data-test=\"password\"]")))
    userName = self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"username\"]")
    userName.send_keys(globCon.standardUsername)
    password = self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"password\"]")
    password.send_keys(globCon.validPassword)
    WebDriverWait(self.driver, 1).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "*[data-test=\"login-button\"]")))
    loginBtn = self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"login-button\"]")
    loginBtn.click()
    WebDriverWait(self.driver, 1).until(expected_conditions.visibility_of_element_located((By.CLASS_NAME,"product_sort_container")))
    itemSortContainer = self.driver.find_element(By.CLASS_NAME,"product_sort_container")
    itemSortContainer.click()
    WebDriverWait(self.driver, 1).until(expected_conditions.visibility_of_element_located((By.XPATH,"/html/body/div/div/div/div[1]/div[2]/div/span/select/option[3]")))
    lowToHighOption = self.driver.find_element(By.XPATH,"/html/body/div/div/div/div[1]/div[2]/div/span/select/option[3]")
    lowToHighOption.click()
    WebDriverWait(self.driver, 1).until(expected_conditions.visibility_of_element_located((By.CLASS_NAME,"inventory_item_price")))
    items = self.driver.find_elements(By.CLASS_NAME,"inventory_item_price")
    assert items[0].text < items[1].text
  
  def test_invalidLogin(self):
    
    WebDriverWait(self.driver, 1).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "*[data-test=\"username\"]")))
    WebDriverWait(self.driver, 1).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "*[data-test=\"password\"]")))
    username = self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"username\"]")
    username.send_keys("kullaniciadi")
    password = self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"password\"]")
    password.send_keys("sifre")
    WebDriverWait(self.driver, 1).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "*[data-test=\"login-button\"]")))
    loginBtn = self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"login-button\"]")
    loginBtn.click()
    WebDriverWait(self.driver, 1).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "*[data-test=\"error\"]")))
    errorMessage = self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"error\"]")
    
    
    assert errorMessage.text == "Epic sadface: Username and password do not match any user in this service"
  
  def test_twitterButton(self):
  
    WebDriverWait(self.driver, 1).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "*[data-test=\"username\"]")))
    WebDriverWait(self.driver, 1).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "*[data-test=\"password\"]")))
    username = self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"username\"]")
    username.send_keys("standard_user")
    password = self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"password\"]")
    password.send_keys("secret_sauce")
    WebDriverWait(self.driver, 1).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "*[data-test=\"login-button\"]")))
    loginBtn = self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"login-button\"]")
    loginBtn.click()
    WebDriverWait(self.driver, 5).until(expected_conditions.visibility_of_element_located((By.LINK_TEXT, "Twitter")))
    self.vars["window_handles"] = self.driver.window_handles
    twitterBtn = self.driver.find_element(By.LINK_TEXT, "Twitter")
    twitterBtn.click()
    self.vars["win6219"] = self.wait_for_window(2000)
    self.driver.switch_to.window(self.vars["win6219"])
    
    self.driver.switch_to.window(self.driver.window_handles[1])
    currentUrl = self.driver.current_url
    assert currentUrl == "https://twitter.com/saucelabs"
  
